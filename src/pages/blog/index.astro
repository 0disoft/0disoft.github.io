---
// src/pages/blog/index.astro
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";

const allPosts = await getCollection("blog");
allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
// 초기 12개 게시물만 렌더링
const initialPosts = allPosts.slice(0, 12);

const pageTitle = "Blog";
---

<BaseLayout title={pageTitle}>
  <section>
    <ul id="post-list">
      {
        initialPosts.map((post) => (
          <li class="post-item">
            <a href={`/blog/${post.slug}/`} class="post-link">
              <div class="post-content">
                <h2 class="post-title">{post.data.title}</h2>
                <p class="post-description">{post.data.description}</p>
                <time
                  class="post-date"
                  datetime={post.data.pubDate.toISOString()}
                >
                  {post.data.pubDate.toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })}
                </time>
              </div>
            </a>
          </li>
        ))
      }
    </ul>
    <div id="load-more-trigger"></div>
  </section>
</BaseLayout>

<style>
  :global(ul#post-list) {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
  }
  :global(.post-item) {
    border: 1px solid var(--border-color);
    border-radius: 16px;
    transition:
      transform 0.2s ease-in-out,
      box-shadow 0.2s ease-in-out;
  }
  :global(.post-item:hover) {
    border-color: var(--primary-color);
  }
  :global(.post-link) {
    display: block;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }
  :global(.post-content) {
    padding: 1.5rem;
  }
  :global(.post-title) {
    font-size: 1.25em;
    margin: 0 0 0.5rem 0;
    color: var(--primary-color);
  }
  :global(.post-description) {
    font-size: 0.75em;
    margin-bottom: 1rem;
    color: var(--secondary-color);
  }
  :global(.post-date) {
    font-size: 0.75em;
    color: var(--secondary-color);
  }
</style>

<script>
  // --- 무한 스크롤 클라이언트 스크립트 (수정된 최종 버전) ---

  const postList = document.getElementById("post-list") as HTMLUListElement;
  const trigger = document.getElementById("load-more-trigger");

  let allPostsData: any[] = []; // 모든 포스트 데이터를 저장할 배열
  let loadedPostsCount = postList.getElementsByTagName("li").length;
  const limit = 12;

  // 1. 처음에 모든 포스트 데이터를 한 번만 불러옵니다.
  const fetchAllPosts = async () => {
    try {
      const response = await fetch("/api/posts.json");
      allPostsData = await response.json();

      // 모든 포스트를 이미 다 보여주고 있다면, 트리거를 제거합니다.
      if (loadedPostsCount >= allPostsData.length) {
        trigger?.remove();
      }
    } catch (error) {
      console.error("Failed to fetch all posts:", error);
    }
  };

  // 2. 다음 포스트들을 '메모리에서' 잘라와 화면에 추가합니다.
  const loadMorePosts = () => {
    if (loadedPostsCount >= allPostsData.length) {
      observer?.unobserve(trigger!);
      trigger?.remove();
      return;
    }

    const nextPosts = allPostsData.slice(
      loadedPostsCount,
      loadedPostsCount + limit
    );

    const postsHtml = nextPosts
      .map((post) => {
        const postDate = new Date(post.pubDate).toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric",
        });
        return `
        <li class="post-item">
          <a href="/blog/${post.slug}/" class="post-link">
            <div class="post-content">
              <h2 class="post-title">${post.title}</h2>
              <p class="post-description">${post.description}</p>
              <time class="post-date" datetime="${post.pubDate}">${postDate}</time>
            </div>
          </a>
        </li>`;
      })
      .join("");

    postList.insertAdjacentHTML("beforeend", postsHtml);
    loadedPostsCount += nextPosts.length;

    // 모든 포스트를 로드했다면 관찰을 중단합니다.
    if (loadedPostsCount >= allPostsData.length) {
      observer?.unobserve(trigger!);
      trigger?.remove();
    }
  };

  // 3. IntersectionObserver 설정
  let observer: IntersectionObserver | null = null;
  if (trigger) {
    observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          loadMorePosts(); // 이제 네트워크 요청이 아닌, 메모리에서 데이터를 가져옵니다.
        }
      },
      { rootMargin: "200px" }
    );
    observer.observe(trigger);
  }

  // 페이지 로드 시 전체 포스트 데이터를 미리 불러옵니다.
  fetchAllPosts();
</script>
